{"version":3,"sources":["Section.js","questionMarkIcon.png","01_title_attribute/TitleAttributeBad.js","01_title_attribute/TitleAttributeGood.js","02_short_content_hover_focus/ShortContentHoverFocusBad.js","02_short_content_hover_focus/ShortContentHoverFocusGood.js","03_short_content_click_keypress/ShortContentClickKeypressBad.js","03_short_content_click_keypress/ShortContentClickKeypressGood.js","04_long_content/LongContentBad.js","04_long_content/LongContentGood.js","App.js","index.js"],"names":["Section","children","className","TitleAttributeBad","src","QuestionMarkIcon","height","width","title","alt","TitleAttributeGood","ShortContentHoverFocusBad","content","Tooltip","useState","showTooltip","setShowTooltip","onMouseEnter","onMouseLeave","ShortContentHoverFocusGood","useEffect","closeTooltipOnEscapeKeyDown","e","key","document","addEventListener","removeEventListener","tabIndex","onFocus","onBlur","id","role","ShortContentClickKeypressBad","tooltipTriggerContainerRef","useRef","handleClickOutside","current","contains","target","ref","onClick","ShortContentClickKeypressGood","toggleTooltip","onKeyDown","includes","preventDefault","LongContentBad","tooltipContent","LongContentGood","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"gRAGaA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACrB,yBAASC,UAAU,UAAnB,SAA8BD,KCJjB,MAA0B,6CCE5BE,EAAoB,kBAC/B,oFACsD,IACpD,qBACEC,IAAKC,EACLC,OAAO,KACPC,MAAM,KACNC,MAAM,iBACNC,IAAI,uBCTGC,EAAqB,kBAChC,2FAC4D,yCAAmB,IAD/E,qD,OCEWC,G,KAA4B,WACvC,OACE,sFACsD,IACpD,cAAC,EAAD,CAASC,QAAQ,iBAAjB,SACE,qBAAKR,IAAKC,EAAkBC,OAAO,KAAKC,MAAM,KAAKE,IAAI,gBAMzDI,EAAU,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,SAAUW,EAAc,EAAdA,QAC3B,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,OACE,uBAAMd,UAAU,0BAAhB,UACE,sBACEe,aAAc,kBAAMD,GAAe,IACnCE,aAAc,kBAAMF,GAAe,IAFrC,SAIGf,IAEFc,GAAe,qBAAKb,UAAU,mBAAf,SAAmCU,QCtB5CO,EAA6B,WACxC,OACE,sFACsD,IACpD,cAAC,EAAD,CAASP,QAAQ,iBAAjB,SACE,qBAAKR,IAAKC,EAAkBC,OAAO,KAAKC,MAAM,KAAKE,IAAI,eAMzDI,EAAU,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,SAAUW,EAAc,EAAdA,QAC3B,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAgBA,OAdAI,qBAAU,WACR,IAAMC,EAA8B,SAAAC,GACpB,WAAVA,EAAEC,KACJP,GAAe,IAMnB,OAFAQ,SAASC,iBAAiB,UAAWJ,GAE9B,WACLG,SAASE,oBAAoB,UAAWL,OAK1C,uBAAMnB,UAAU,0BAAhB,UACE,sBACEyB,SAAS,IACTV,aAAc,kBAAMD,GAAe,IACnCE,aAAc,kBAAMF,GAAe,IACnCY,QAAS,kBAAMZ,GAAe,IAC9Ba,OAAQ,kBAAMb,GAAe,IAC7B,mBAAiB,kBANnB,SAQGf,IAEFc,GACC,qBAAKb,UAAU,mBAAmB4B,GAAG,kBAAkBC,KAAK,UAA5D,SACGnB,QC1CEoB,EAA+B,WAC1C,OACE,sFACsD,IACpD,cAAC,EAAD,CAASpB,QAAQ,iBAAjB,SACE,qBAAKR,IAAKC,EAAkBC,OAAO,KAAKC,MAAM,KAAKE,IAAI,eAMzDI,EAAU,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,SAAUW,EAAc,EAAdA,QAC3B,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMiB,EAA6BC,iBAAO,MAE1Cd,qBAAU,WACR,IAAMe,EAAqB,SAAAb,GACpBW,EAA2BG,QAAQC,SAASf,EAAEgB,SACjDtB,GAAe,IAMnB,OAFAQ,SAASC,iBAAiB,QAASU,GAE5B,WACLX,SAASE,oBAAoB,QAASS,MAEvC,CAACnB,IAIJ,OACE,uBAAMd,UAAU,0BAA0BqC,IAAKN,EAA/C,UACE,sBAAMO,QAJY,kBAAMxB,GAAe,SAAAD,GAAW,OAAKA,MAIvD,SAA+Bd,IAC9Bc,GAAe,qBAAKb,UAAU,mBAAf,SAAmCU,QClC5C6B,EAAgC,WAC3C,OACE,sFACsD,IACpD,cAAC,EAAD,CAAS7B,QAAQ,iBAAjB,SACE,qBAAKR,IAAKC,EAAkBC,OAAO,KAAKC,MAAM,KAAKE,IAAI,eAMzDI,EAAU,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,SAAUW,EAAc,EAAdA,QAC3B,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMiB,EAA6BC,iBAAO,MAE1Cd,qBAAU,WACR,IAAMe,EAAqB,SAAAb,GACpBW,EAA2BG,QAAQC,SAASf,EAAEgB,SACjDtB,GAAe,IAMnB,OAFAQ,SAASC,iBAAiB,QAASU,GAE5B,WACLX,SAASE,oBAAoB,QAASS,MAEvC,CAACnB,IAEJI,qBAAU,WACR,IAAMC,EAA8B,SAAAC,GACpB,WAAVA,EAAEC,KACJP,GAAe,IAMnB,OAFAQ,SAASC,iBAAiB,UAAWJ,GAE9B,WACLG,SAASE,oBAAoB,UAAWL,OAI5C,IAAMqB,EAAgB,kBAAM1B,GAAe,SAAAD,GAAW,OAAKA,MAW3D,OACE,uBAAMb,UAAU,0BAA0BqC,IAAKN,EAA/C,UACE,sBACEN,SAAS,IACTI,KAAK,SACLS,QAASE,EACTC,UAf8B,SAAArB,GACL,CAAC,QAAS,IAAK,SAEnBsB,SAAStB,EAAEC,OAClCD,EAAEuB,iBACFH,MAWE,gBAAe3B,EACf,mBAAiB,kBANnB,SAQGd,IAEFc,GACC,qBACEb,UAAU,mBACV4B,GAAG,kBACHC,KAAK,UACL,YAAU,SAJZ,SAMGnB,QCzEEkC,EAAiB,WAC5B,IAAMC,EACJ,qCACE,qLAKA,6LAQJ,OACE,sFACsD,IACpD,cAAC,EAAD,CAASnC,QAASmC,EAAlB,SACE,qBAAK3C,IAAKC,EAAkBC,OAAO,KAAKC,MAAM,KAAKE,IAAI,eAMzDI,EAAU,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,SAAUW,EAAc,EAAdA,QAC3B,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMiB,EAA6BC,iBAAO,MAE1Cd,qBAAU,WACR,IAAMe,EAAqB,SAAAb,GACpBW,EAA2BG,QAAQC,SAASf,EAAEgB,SACjDtB,GAAe,IAMnB,OAFAQ,SAASC,iBAAiB,QAASU,GAE5B,WACLX,SAASE,oBAAoB,QAASS,MAEvC,CAACnB,IAEJI,qBAAU,WACR,IAAMC,EAA8B,SAAAC,GACpB,WAAVA,EAAEC,KACJP,GAAe,IAMnB,OAFAQ,SAASC,iBAAiB,UAAWJ,GAE9B,WACLG,SAASE,oBAAoB,UAAWL,OAI5C,IAAMqB,EAAgB,kBAAM1B,GAAe,SAAAD,GAAW,OAAKA,MAW3D,OACE,uBAAMb,UAAU,0BAA0BqC,IAAKN,EAA/C,UACE,sBACEN,SAAS,IACTI,KAAK,SACLS,QAASE,EACTC,UAf8B,SAAArB,GACL,CAAC,QAAS,IAAK,SAEnBsB,SAAStB,EAAEC,OAClCD,EAAEuB,iBACFH,MAWE,gBAAe3B,EACf,mBAAiB,kBANnB,SAQGd,IAEFc,GACC,qBACEb,UAAU,mBACV4B,GAAG,kBACHC,KAAK,UACL,YAAU,SAJZ,SAMGnB,QCxFEoC,EAAkB,WAC7B,IAAMD,EACJ,qCACE,qLAKA,6LAQJ,OACE,sFACsD,IACpD,cAAC,EAAD,CAASnC,QAASmC,EAAlB,SACE,qBAAK3C,IAAKC,EAAkBC,OAAO,KAAKC,MAAM,KAAKE,IAAI,eAMzDI,EAAU,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,SAAUW,EAAc,EAAdA,QAC3B,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMiB,EAA6BC,iBAAO,MAE1Cd,qBAAU,WACR,IAAMC,EAA8B,SAAAC,GACpB,WAAVA,EAAEC,KACJP,GAAe,IAMnB,OAFAQ,SAASC,iBAAiB,UAAWJ,GAE9B,WACLG,SAASE,oBAAoB,UAAWL,OAI5C,IAAMqB,EAAgB,kBAAM1B,GAAe,SAAAD,GAAW,OAAKA,MAW3D,OACE,uBAAMb,UAAU,0BAA0BqC,IAAKN,EAA/C,UACE,sBACEN,SAAS,IACTI,KAAK,SACLS,QAASE,EACTC,UAf8B,SAAArB,GACL,CAAC,QAAS,IAAK,SAEnBsB,SAAStB,EAAEC,OAClCD,EAAEuB,iBACFH,MAWE,gBAAe3B,EALjB,SAOGd,IAEFc,GACC,qBAAKb,UAAU,mBAAmB4B,GAAG,kBAAkBC,KAAK,UAA5D,SACGnB,QC5DEqC,G,MAAM,kBACjB,iCACE,qDACA,uBAEA,eAAC,EAAD,WACE,4CACY,yCADZ,gBAGA,6CACA,cAAC,EAAD,IACA,8CACA,cAAC,EAAD,OAGF,eAAC,EAAD,WACE,6DACA,6CACA,cAAC,EAAD,IACA,8CACA,cAAC,EAAD,OAGF,eAAC,EAAD,WACE,gEACA,6CACA,cAAC,EAAD,IACA,8CACA,cAAC,EAAD,OAGF,eAAC,EAAD,WACE,8CACA,6CACA,cAAC,EAAD,IACA,8CACA,cAAC,EAAD,OAGF,eAAC,EAAD,WACE,qDACA,6CACA,qCACA,8CACA,6CCnDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,W","file":"static/js/main.8d383d42.chunk.js","sourcesContent":["import React from 'react';\nimport './Section.css';\n\nexport const Section = ({ children }) => (\n  <section className=\"section\">{children}</section>\n);\n","export default __webpack_public_path__ + \"static/media/questionMarkIcon.22c38de2.png\";","import React from 'react';\nimport QuestionMarkIcon from '../questionMarkIcon.png';\nexport const TitleAttributeBad = () => (\n  <p>\n    Here's a sentence that may need some clarification.{' '}\n    <img\n      src={QuestionMarkIcon}\n      height=\"12\"\n      width=\"12\"\n      title=\"More info here\"\n      alt=\"More info here\"\n    />\n  </p>\n);\n\n// NOTES:\n// Works well for mouse users to hover\n// Works well for screen reader users due to the use of the alt attribute\n// Does not work for keyboard users because the title tooltip does not appear on focus\n","import React from 'react';\nexport const TitleAttributeGood = () => (\n  <p>\n    Trick question! There's really not a great way to use the <code>title</code>{' '}\n    attribute for tooltips that work for everyone.\n  </p>\n);\n\n// NOTES:\n// The title attribute has been around since 1993 and still isn't accessible!\n","import React, { useState } from 'react';\nimport QuestionMarkIcon from '../questionMarkIcon.png';\nimport '../Tooltip.css';\n\nexport const ShortContentHoverFocusBad = () => {\n  return (\n    <div>\n      Here's a sentence that may need some clarification.{' '}\n      <Tooltip content=\"More info here\">\n        <img src={QuestionMarkIcon} height=\"12\" width=\"12\" alt=\"Help\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst Tooltip = ({ children, content }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  return (\n    <span className=\"tooltipTriggerContainer\">\n      <span\n        onMouseEnter={() => setShowTooltip(true)}\n        onMouseLeave={() => setShowTooltip(false)}\n      >\n        {children}\n      </span>\n      {showTooltip && <div className=\"tooltipContainer\">{content}</div>}\n    </span>\n  );\n};\n\n// NOTES:\n// Works well for mouse users on mouseenter and mouseleave\n// Does not work for keyboard users because you can't focus the icon\n// Does not work for screen reader users because you can't focus the icon\n","import React, { useEffect, useState } from 'react';\nimport QuestionMarkIcon from '../questionMarkIcon.png';\nimport '../Tooltip.css';\n\nexport const ShortContentHoverFocusGood = () => {\n  return (\n    <div>\n      Here's a sentence that may need some clarification.{' '}\n      <Tooltip content=\"More info here\">\n        <img src={QuestionMarkIcon} height=\"12\" width=\"12\" alt=\"Help\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst Tooltip = ({ children, content }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  useEffect(() => {\n    const closeTooltipOnEscapeKeyDown = e => {\n      if (e.key === 'Escape') {\n        setShowTooltip(false);\n      }\n    };\n\n    document.addEventListener('keydown', closeTooltipOnEscapeKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', closeTooltipOnEscapeKeyDown);\n    };\n  });\n\n  return (\n    <span className=\"tooltipTriggerContainer\">\n      <span\n        tabIndex=\"0\"\n        onMouseEnter={() => setShowTooltip(true)}\n        onMouseLeave={() => setShowTooltip(false)}\n        onFocus={() => setShowTooltip(true)}\n        onBlur={() => setShowTooltip(false)}\n        aria-describedby=\"tooltip-content\"\n      >\n        {children}\n      </span>\n      {showTooltip && (\n        <div className=\"tooltipContainer\" id=\"tooltip-content\" role=\"tooltip\">\n          {content}\n        </div>\n      )}\n    </span>\n  );\n};\n\n// NOTES:\n// Works well for mouse users on mouseenter and mouseleave\n// Works well for keyboard users on focus and blur due to the use of the `tabIndex=\"0\"`\n// Works well for screen reader users due to the use of the `aria-describedby` attribute\n// No need to use the `aria-expanded` attribute since it will always be open when the screen reader gets to the trigger icon\n// No need to use the `role=\"button\"` because this is not actually a clickable button\n// You can also dismiss the tooltip by pressing the Escape key\n","import React, { useEffect, useRef, useState } from 'react';\nimport QuestionMarkIcon from '../questionMarkIcon.png';\nimport '../Tooltip.css';\n\nexport const ShortContentClickKeypressBad = () => {\n  return (\n    <div>\n      Here's a sentence that may need some clarification.{' '}\n      <Tooltip content=\"More info here\">\n        <img src={QuestionMarkIcon} height=\"12\" width=\"12\" alt=\"Help\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst Tooltip = ({ children, content }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const tooltipTriggerContainerRef = useRef(null);\n\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (!tooltipTriggerContainerRef.current.contains(e.target)) {\n        setShowTooltip(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [setShowTooltip]);\n\n  const toggleTooltip = () => setShowTooltip(showTooltip => !showTooltip);\n\n  return (\n    <span className=\"tooltipTriggerContainer\" ref={tooltipTriggerContainerRef}>\n      <span onClick={toggleTooltip}>{children}</span>\n      {showTooltip && <div className=\"tooltipContainer\">{content}</div>}\n    </span>\n  );\n};\n\n// NOTES:\n// Works well for mouse users to click to show or hide the tooltip\n// You can click anywhere outside the tooltip content or trigger icon to close the tooltip\n// Does not work for keyboard users because you can't focus the icon\n// Does not work for screen reader users because you can't focus the icon\n","import React, { useEffect, useRef, useState } from 'react';\nimport QuestionMarkIcon from '../questionMarkIcon.png';\nimport '../Tooltip.css';\n\nexport const ShortContentClickKeypressGood = () => {\n  return (\n    <div>\n      Here's a sentence that may need some clarification.{' '}\n      <Tooltip content=\"More info here\">\n        <img src={QuestionMarkIcon} height=\"12\" width=\"12\" alt=\"Help\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst Tooltip = ({ children, content }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const tooltipTriggerContainerRef = useRef(null);\n\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (!tooltipTriggerContainerRef.current.contains(e.target)) {\n        setShowTooltip(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [setShowTooltip]);\n\n  useEffect(() => {\n    const closeTooltipOnEscapeKeyDown = e => {\n      if (e.key === 'Escape') {\n        setShowTooltip(false);\n      }\n    };\n\n    document.addEventListener('keydown', closeTooltipOnEscapeKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', closeTooltipOnEscapeKeyDown);\n    };\n  });\n\n  const toggleTooltip = () => setShowTooltip(showTooltip => !showTooltip);\n\n  const handleTooltipTriggerKeyDown = e => {\n    const clickInteractionKeys = ['Space', ' ', 'Enter'];\n\n    if (clickInteractionKeys.includes(e.key)) {\n      e.preventDefault();\n      toggleTooltip();\n    }\n  };\n\n  return (\n    <span className=\"tooltipTriggerContainer\" ref={tooltipTriggerContainerRef}>\n      <span\n        tabIndex=\"0\"\n        role=\"button\"\n        onClick={toggleTooltip}\n        onKeyDown={handleTooltipTriggerKeyDown}\n        aria-expanded={showTooltip}\n        aria-describedby=\"tooltip-content\"\n      >\n        {children}\n      </span>\n      {showTooltip && (\n        <div\n          className=\"tooltipContainer\"\n          id=\"tooltip-content\"\n          role=\"tooltip\"\n          aria-live=\"polite\"\n        >\n          {content}\n        </div>\n      )}\n    </span>\n  );\n};\n\n// NOTES:\n// Works well for mouse users to click to show or hide the tooltip\n// You can click anywhere outside the tooltip content or trigger icon to close the tooltip\n// Works well for keyboard users on Space/Enter keydown due to the use of the `tabIndex=\"0\"`\n// Works well for screen reader users due to the use of the `aria-describedby` and `aria-live` attributes\n// We use the `aria-expanded` attribute to communicate whether the tooltip is hidden or shown\n// We use the `role=\"button\"` because this is a clickable button\n// You can also dismiss the tooltip by pressing the Escape key\n","import React, { useEffect, useRef, useState } from 'react';\nimport QuestionMarkIcon from '../questionMarkIcon.png';\nimport '../Tooltip.css';\n\nexport const LongContentBad = () => {\n  const tooltipContent = (\n    <>\n      <p>\n        More info here. It's pretty lengthy text. In fact, it's a whole wall of\n        text. So much that we could probably split this up into a couple\n        paragraphs.\n      </p>\n      <p>\n        It's a lot to take in! Wouldn't it be awful if the screen reader just\n        read this all to you at once? That could be pretty overwhelming. No one\n        wants that.\n      </p>\n    </>\n  );\n\n  return (\n    <div>\n      Here's a sentence that may need some clarification.{' '}\n      <Tooltip content={tooltipContent}>\n        <img src={QuestionMarkIcon} height=\"12\" width=\"12\" alt=\"Help\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst Tooltip = ({ children, content }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const tooltipTriggerContainerRef = useRef(null);\n\n  useEffect(() => {\n    const handleClickOutside = e => {\n      if (!tooltipTriggerContainerRef.current.contains(e.target)) {\n        setShowTooltip(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [setShowTooltip]);\n\n  useEffect(() => {\n    const closeTooltipOnEscapeKeyDown = e => {\n      if (e.key === 'Escape') {\n        setShowTooltip(false);\n      }\n    };\n\n    document.addEventListener('keydown', closeTooltipOnEscapeKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', closeTooltipOnEscapeKeyDown);\n    };\n  });\n\n  const toggleTooltip = () => setShowTooltip(showTooltip => !showTooltip);\n\n  const handleTooltipTriggerKeyDown = e => {\n    const clickInteractionKeys = ['Space', ' ', 'Enter'];\n\n    if (clickInteractionKeys.includes(e.key)) {\n      e.preventDefault();\n      toggleTooltip();\n    }\n  };\n\n  return (\n    <span className=\"tooltipTriggerContainer\" ref={tooltipTriggerContainerRef}>\n      <span\n        tabIndex=\"0\"\n        role=\"button\"\n        onClick={toggleTooltip}\n        onKeyDown={handleTooltipTriggerKeyDown}\n        aria-expanded={showTooltip}\n        aria-describedby=\"tooltip-content\"\n      >\n        {children}\n      </span>\n      {showTooltip && (\n        <div\n          className=\"tooltipContainer\"\n          id=\"tooltip-content\"\n          role=\"tooltip\"\n          aria-live=\"polite\"\n        >\n          {content}\n        </div>\n      )}\n    </span>\n  );\n};\n\n// NOTES:\n// Works well for mouse users to click to show or hide the tooltip\n// You can click anywhere outside the tooltip content or trigger icon to close the tooltip\n// Works well for keyboard users on Space/Enter keydown due to the use of the `tabIndex=\"0\"`\n// DOES NOT work well for screen reader users due to the use of the `aria-describedby` and `aria-live` attributes that read everything to you\n// We use the `aria-expanded` attribute to communicate whether the tooltip is hidden or shown\n// We use the `role=\"button\"` because this is a clickable button\n// You can also dismiss the tooltip by pressing the Escape key\n","import React, { useEffect, useRef, useState } from 'react';\nimport QuestionMarkIcon from '../questionMarkIcon.png';\nimport '../Tooltip.css';\n\nexport const LongContentGood = () => {\n  const tooltipContent = (\n    <>\n      <p>\n        More info here. It's pretty lengthy text. In fact, it's a whole wall of\n        text. So much that we could probably split this up into a couple\n        paragraphs.\n      </p>\n      <p>\n        It's a lot to take in! Wouldn't it be awful if the screen reader just\n        read this all to you at once? That could be pretty overwhelming. No one\n        wants that.\n      </p>\n    </>\n  );\n\n  return (\n    <div>\n      Here's a sentence that may need some clarification.{' '}\n      <Tooltip content={tooltipContent}>\n        <img src={QuestionMarkIcon} height=\"12\" width=\"12\" alt=\"Help\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst Tooltip = ({ children, content }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const tooltipTriggerContainerRef = useRef(null);\n\n  useEffect(() => {\n    const closeTooltipOnEscapeKeyDown = e => {\n      if (e.key === 'Escape') {\n        setShowTooltip(false);\n      }\n    };\n\n    document.addEventListener('keydown', closeTooltipOnEscapeKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', closeTooltipOnEscapeKeyDown);\n    };\n  });\n\n  const toggleTooltip = () => setShowTooltip(showTooltip => !showTooltip);\n\n  const handleTooltipTriggerKeyDown = e => {\n    const clickInteractionKeys = ['Space', ' ', 'Enter'];\n\n    if (clickInteractionKeys.includes(e.key)) {\n      e.preventDefault();\n      toggleTooltip();\n    }\n  };\n\n  return (\n    <span className=\"tooltipTriggerContainer\" ref={tooltipTriggerContainerRef}>\n      <span\n        tabIndex=\"0\"\n        role=\"button\"\n        onClick={toggleTooltip}\n        onKeyDown={handleTooltipTriggerKeyDown}\n        aria-expanded={showTooltip}\n      >\n        {children}\n      </span>\n      {showTooltip && (\n        <div className=\"tooltipContainer\" id=\"tooltip-content\" role=\"tooltip\">\n          {content}\n        </div>\n      )}\n    </span>\n  );\n};\n\n// NOTES:\n// Works well for mouse users to click to show or hide the tooltip\n// You can click anywhere outside the tooltip content or trigger icon to close the tooltip\n// Works well for keyboard users on Space/Enter keydown due to the use of the `tabIndex=\"0\"`\n// Works well for screen reader users due to NOT USING the `aria-describedby` and `aria-live` attributes so all the text IS NOT read all at once\n// We use the `aria-expanded` attribute to communicate whether the tooltip is hidden or shown\n// We use the `role=\"button\"` because this is a clickable button\n// You can also dismiss the tooltip by pressing the Escape key\n\n// TODO: Confirm if this is the best approach for long content.\n//   Right now I've chosen to remove the `aria-live` and the `aria-describedby`\n//   attributes and just allow the screen reader user to navigate to this content\n//   when they want to read it. That way they don't get blasted with a couple paragraphs\n//   of text being read by them.\n","import React from 'react';\nimport { Section } from './Section';\nimport { TitleAttributeBad } from './01_title_attribute/TitleAttributeBad';\nimport { TitleAttributeGood } from './01_title_attribute/TitleAttributeGood';\nimport { ShortContentHoverFocusBad } from './02_short_content_hover_focus/ShortContentHoverFocusBad';\nimport { ShortContentHoverFocusGood } from './02_short_content_hover_focus/ShortContentHoverFocusGood';\nimport { ShortContentClickKeypressBad } from './03_short_content_click_keypress/ShortContentClickKeypressBad';\nimport { ShortContentClickKeypressGood } from './03_short_content_click_keypress/ShortContentClickKeypressGood';\nimport { LongContentBad } from './04_long_content/LongContentBad';\nimport { LongContentGood } from './04_long_content/LongContentGood';\nimport './App.css';\n\nexport const App = () => (\n  <main>\n    <h1>Accessible Tooltips</h1>\n    <hr />\n\n    <Section>\n      <h2>\n        Using the <code>title</code> Attribute\n      </h2>\n      <h3>Bad Example</h3>\n      <TitleAttributeBad />\n      <h3>Good Example</h3>\n      <TitleAttributeGood />\n    </Section>\n\n    <Section>\n      <h2>Short Content (Hover/Focus)</h2>\n      <h3>Bad Example</h3>\n      <ShortContentHoverFocusBad />\n      <h3>Good Example</h3>\n      <ShortContentHoverFocusGood />\n    </Section>\n\n    <Section>\n      <h2>Short Content (Click/Keypress)</h2>\n      <h3>Bad Example</h3>\n      <ShortContentClickKeypressBad />\n      <h3>Good Example</h3>\n      <ShortContentClickKeypressGood />\n    </Section>\n\n    <Section>\n      <h2>Long Content</h2>\n      <h3>Bad Example</h3>\n      <LongContentBad />\n      <h3>Good Example</h3>\n      <LongContentGood />\n    </Section>\n\n    <Section>\n      <h2>Interactive Content</h2>\n      <h3>Bad Example</h3>\n      <p>TODO</p>\n      <h3>Good Example</h3>\n      <p>TODO</p>\n    </Section>\n  </main>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}